%function SLibGenerateMakefile() void
%openfile tmpBuf = "Makefile"
# Auto generated by RTW (px4_ap1_makefile.tlc)
# Changes to this file may cause incorrect behavior 
# and will be lost if the code is regenerated
#
# PX4-Blockset
# Makefile for build and upload px4 custom software

PROJECT = %<LibGetModelName()>

# include of outsourced tool paths "ARMTOOLCHAIN" and "PYTHON" and COM-portname
include makeParams.mk

LDSCRIPT  = linker.ld
MKFW	  = "px_mkfw.py"
UPLOADER  = "px_uploader.py"

ELF = $(PROJECT).elf
HEX = $(PROJECT).hex
BIN = $(PROJECT).bin
LST = $(PROJECT).lss
DMP = $(PROJECT).dmp
MAP = $(PROJECT).map

PRODUCT_BUNDLE = $(PROJECT).px4

# Toolchain configurations
CXX 	= "$(ARMTOOLCHAIN)g++"
CC 		= "$(ARMTOOLCHAIN)gcc"
AS 		= "$(ARMTOOLCHAIN)gcc" -x assembler-with-cpp
OBJCOPY = "$(ARMTOOLCHAIN)objcopy"
OBJDUMP = "$(ARMTOOLCHAIN)objdump"
SIZE 	= "$(ARMTOOLCHAIN)size"

# OS specific configurations
ifeq ($(OS),Windows_NT) 
RM = del /Q /F
CP = copy /Y
ifdef ComSpec
SHELL := $(ComSpec)
endif
ifdef COMSPEC
SHELL := $(COMSPEC)
endif
else
RM = rm -rf
CP = cp -f
endif

# Compiler flags
CFLAGS = $(patsubst %, -I%, .) -mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16 -std=c11 -Wall -Werror -Wextra -Wno-unused-parameter -std=c11 -Ofast -fstack-usage -Wstack-usage=2048

# board specific defines
CFLAGS += -DHSE_VALUE=24000000
CFLAGS += -DSTM32F427xx

# enable HAL driver
CFLAGS += -DUSE_HAL_DRIVER

# enable FatFs Config # TODO: remove after adapting
CFLAGS += -DUSE_STM324xG_EVAL


# enable follow hal driver modules
#CFLAGS += -DHAL_MODULE_ENABLED
#CFLAGS += -DHAL_FLASH_MODULE_ENABLED
#CFLAGS += -DHAL_PWR_MODULE_ENABLED
#CFLAGS += -DHAL_RCC_MODULE_ENABLED
#CFLAGS += -DHAL_CORTEX_MODULE_ENABLED
#CFLAGS += -DHAL_GPIO_MODULE_ENABLED
#CFLAGS += -DHAL_DMA_MODULE_ENABLED
#CFLAGS += -DHAL_TIM_MODULE_ENABLED
#CFLAGS += -DHAL_UART_MODULE_ENABLED
#CFLAGS += -DHAL_SPI_MODULE_ENABLED
#CFLAGS += -DHAL_I2C_MODULE_ENABLED
#CFLAGS += -DHAL_SD_MODULE_ENABLED


%% other defines
%if (EXISTS(::_DEBUG_MODE_) == 1)
# enable debug mode
CFLAGS += -DDEBUG
%endif

#Includes
CFLAGS += -IFatFs/Core
CFLAGS += -IFatFs/Drivers

CFLAGS += -IFreeRTOS/Source/CMSIS_RTOS
CFLAGS += -IFreeRTOS/Source/include
CFLAGS += -IFreeRTOS/Source/portable/GCC/ARM_CM4F

# Compiler flags assembled files
AFLAGS = $(CFLAGS)

# Linker flags for CXX
LFLAGS = -T$(LDSCRIPT) -g -Wl,-Map=$(MAP),--cref,--no-warn-mismatch -mcpu=cortex-m4 -mthumb -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16 -specs=nosys.specs

# substitutions
AS_SRCS = $(wildcard *.s)
AS_OBJS = $(AS_SRCS:.s=.o)

C_SRCS =  $(wildcard *.c) 
C_SRCS += $(wildcard FatFs/Core/*.c) 
C_SRCS += $(wildcard FatFs/Drivers/*.c)
C_SRCS += $(wildcard FreeRTOS/Source/*.c) 
C_SRCS += $(wildcard FreeRTOS/Source/CMSIS_RTOS/*.c) 
C_SRCS += $(wildcard FreeRTOS/Source/portable/GCC/ARM_CM4F/*.c) 
C_SRCS += $(wildcard FreeRTOS/Source/portable/MemMang/*.c)

C_OBJS = $(C_SRCS:.c=.o)

OBJS = $(AS_OBJS) $(C_OBJS)

##############################################
# Make all
##############################################
all: build upload

build: $(PRODUCT_BUNDLE) $(DMP) report

upload: 
	$(PYTHON) $(UPLOADER) --port $(COMPORT) $(PRODUCT_BUNDLE)

$(PRODUCT_BUNDLE): $(BIN)
	$(PYTHON) $(MKFW) --prototype px4fmu-v2.prototype --image $< > $@

%assign str = "%.o : %.S"
%<str>
	@echo Assembling file: $<
	$(AS) -c $(AFLAGS) $< -o $@

%assign str = "%.o : %.s"
%<str>
	@echo Assembling file: $<
	$(AS) -c $(AFLAGS) $< -o $@

%assign str = "%.o : %.c"
%<str>
	@echo Compiling: $<
	$(CC) -c $(CFLAGS) $< -o $@

%assign str = "%.o : %.cpp"
%<str>
	@echo CXX Compiling: $<
	$(CXX) -MD -c $(CXXFLAGS) $< -o $@

$(ELF) : $(OBJS)
	@echo Linking target: $(ELF)
	$(CXX) $(OBJS) $(LFLAGS) $(LIBS) -o $@

$(HEX) : $(ELF)
	@echo Creating HEX: $(HEX)
	$(OBJCOPY) -O ihex $< $@

$(BIN) : $(ELF)
	@echo Creating binary image: $(BIN)
	$(OBJCOPY) -O binary $< $@

$(LST) : $(ELF)
	@echo Creating listing: $(LST)
	$(OBJDUMP) -S $< > $@

$(DMP) : $(ELF)
	@echo Creating memory dump: $(DMP)
	$(OBJDUMP) -x --syms $< > $@

report :
	@echo 
	@echo ===================================================================
#	@echo Objects size:
#	$(SIZE) -B -t --common $(OBJS)
#	@echo --------------------------
	@echo Target size:
	$(SIZE) -B $(ELF)
	@echo ===================================================================

clean :
	$(RM) *.o *.d
	$(RM) $(ELF) $(HEX) $(BIN) $(LST) $(DMP) $(MAP) $(PRODUCT_BUNDLE)

.PHONY: clean

signal_output.o sd_card_logger.o: px4_task_time_config.h

%closefile tmpBuf
%endfunction